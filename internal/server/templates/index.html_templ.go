// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

var scriptHanlde = templ.NewOnceHandle()

func Index() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html><head><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><title>Steam Avatars</title><meta name=\"description\" content=\"Extract your animated Steam avatar\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><link rel=\"icon\" href=\"/static/favicon.ico\" type=\"image/x-icon\"><script src=\"https://unpkg.com/htmx.org@2.0.1\" defer></script><style>\n        @font-face {\n          font-family: 'Motiva Sans';\n          src: local('Motiva Sans Bold'), local('MotivaSans-Bold'),\n            url('static/fonts/MotivaSans-Bold.woff2') format('woff2'),\n            url('static/fonts/MotivaSans-Bold.woff') format('woff');\n          font-weight: bold;\n          font-style: normal;\n          font-display: swap;\n        }\n\n        @font-face {\n          font-family: 'Motiva Sans';\n          src: local('Motiva Sans Regular'), local('MotivaSans-Regular'),\n            url('static/fonts/MotivaSans-Regular.woff2') format('woff2'),\n            url('static/fonts/MotivaSans-Regular.woff') format('woff');\n          font-weight: normal;\n          font-style: normal;\n          font-display: swap;\n        }\n\n        .htmx-indicator {\n          opacity: 0;\n        }\n\n        body {\n          background-color: #171d25;\n          color: #fff;\n          font-family: \"Motiva Sans\", \"Twemoji\", \"Noto Sans\", Helvetica, sans-serif;\n          padding: 0;\n          margin: 0;\n          line-height: 1.5;\n        }\n\n        main {\n          display: flex;\n          height: 100vh;\n          flex-direction: column;\n          align-items: center;\n        }\n            button {\n      width: 120px;\n      position: relative;\n      background: linear-gradient(90deg, #06BFFF 0%, #2D73FF 100%);\n      border-radius: 2px;\n      border: none;\n      outline: none;\n      padding: 12px;\n      color: #fff;\n      font-size: 16px;\n      font-weight: 400;\n      font-family: inherit;\n      text-align: center;\n      cursor: pointer;\n    }\n\n    button.green {\n      background: linear-gradient(to right, #75b022 5%, #588a1b 95%);\n    }\n\n    #form {\n      display: flex;\n      flex-direction: column;\n      position: relative;\n      margin-top: 10%;\n      margin-bottom: 20px;\n      align-items: center;\n    }\n\n    h1 {\n      font-size: 42px;\n      text-align: center;\n      margin-bottom: 20px;\n    }\n\n    input {\n      width: 340px;\n      border-radius: 2px;\n      color: #fff;\n      padding: 10px;\n      background-color: #32353c;\n      outline: none;\n      font-size: 15px;\n      grid-area: input;\n      border: 1px solid #32353c;\n    }\n\n    .error {\n      color: #c15755;\n      font-size: 18px;\n      font-weight: 500;\n      text-align: center;\n      margin-top: 10px;\n    }\n\n    ul {\n      display: flex;\n      flex-wrap: wrap;\n      justify-content: center;\n      list-style: none;\n      padding: 0;\n      gap: 10px;\n    }\n        *,\n    *::before,\n    *::after {\n      box-sizing: border-box;\n    }\n\n    * {\n      margin: 0;\n    }\n\n    body {\n      line-height: 1.5;\n      -webkit-font-smoothing: antialiased;\n    }\n\n        input,\n    textarea,\n    select {\n      font: inherit;\n    }\n\n    #root,\n    #__next {\n      isolation: isolate;\n    }\n      </style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n        function copyToClipboard(event) {\n          event.preventDefault();\n          event.stopPropagation();\n          const input = document.querySelector('#avatar_link');\n          input.focus();\n          input.select();\n          document.execCommand('copy');\n        }\n      </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = scriptHanlde.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</head><body><main><div id=\"form\"><h1>STEAM AVATARS</h1><form hx-post=\"/\" hx-disabled-elt=\"find input[type=&#39;text&#39;], find button\" hx-target=\"#result\"><input type=\"text\" name=\"name\" placeholder=\"Steam ID or Vanity url\" required> <button type=\"submit\" class=\"green\" value=\"avatar\" name=\"target\">Avatar</button> <img src=\"/static/bars.svg\" class=\"htmx-indicator\" height=\"24\" style=\"vertical-align: middle\"></form><div id=\"result\"></div></div></main></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
